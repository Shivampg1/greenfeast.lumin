#code for thali scan

import cv2
import numpy as np
from ultralytics import YOLO
import qrcode
import time

model = YOLO("yolov8n.pt")  

FOOD_DENSITY = {
    "rice": 0.02,
    "roti": 0.03,
    "curry": 0.015,
    "dal": 0.01
}

# Initialize webcam
cap = cv2.VideoCapture(0)

def estimate_weight(food_class, pixel_area):
    """Calculate food weight based on pixel area"""
    return pixel_area * FOOD_DENSITY.get(food_class, 0.01)

def generate_upi_qr(fine_amount, upi_id="organizer@upi"):
    """Generate UPI payment QR code"""
    upi_link = f"upi://pay?pa={upi_id}&am={fine_amount}&tn=FoodWasteFine"
    qr = qrcode.make(upi_link)
    qr.save(f"fine_qr_{fine_amount}.png")
    print(f"\n⚠️ Food waste detected! QR code generated for ₹{fine_amount} fine")
    return qr

def calculate_waste(initial_weights, current_frame):
    """Compare current food weights with initial weights"""
    results = model(current_frame)
    waste_data = {}
    total_fine = 0
    
    for result in results:
        for box in result.boxes:
            food_class = model.names[int(box.cls)]
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            pixel_area = (x2 - x1) * (y2 - y1)
            current_weight = estimate_weight(food_class, pixel_area)
            
            wasted = max(0, initial_weights.get(food_class, 0) - current_weight)
            if wasted > 0:
                fine = wasted * 0.10  # ₹0.10 per gram
                total_fine += fine
                waste_data[food_class] = {
                    'wasted_g': wasted,
                    'fine': fine
                }
                cv2.putText(current_frame, f"WASTED: {wasted:.1f}g", 
                           (x1, y1 - 30), cv2.FONT_HERSHEY_SIMPLEX, 
                           0.6, (0, 0, 255), 2)
    
    return current_frame, waste_data, total_fine

print("👉 Press 's' to scan initial thali, 'q' to quit")
initial_weights = {}

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    key = cv2.waitKey(1)

    if key == ord('s'):
        results = model(frame)
        initial_weights = {}
        for result in results:
            for box in result.boxes:
                food_class = model.names[int(box.cls)]
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                initial_weights[food_class] = estimate_weight(food_class, (x2-x1)*(y2-y1))
        print("✅ Initial thali scanned. Start eating...")
    
    elif initial_weights:  # Only check after initial scan
        frame, waste_data, total_fine = calculate_waste(initial_weights, frame.copy())
        
        if total_fine > 0 and key == ord('f'):
            qr = generate_upi_qr(round(total_fine, 2))
            cv2.imshow("QR Code", cv2.imread(f"fine_qr_{round(total_fine, 2)}.png"))
    
    cv2.imshow("Thali Monitoring System", frame)
    
    if key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
